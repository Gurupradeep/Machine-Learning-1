source('C:/Users/Prajwala/Desktop/ex.R')
source('C:/Users/Prajwala/Desktop/ex.R')
source('C:/Users/Prajwala/Desktop/ex.R')
install.packages("xgboost")
library(caret)
install.packages("caret")
library(caret)
install.packages("minqa")
install.packages("pbkrtest")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("nlopt-devel")
install.packages("caret")
library(caret,"C:/Users/Prajwala/AppData/Local/Temp/RtmpOGSWXx/downloaded_packages")
library(caret,lib.loc= "C:/Users/Prajwala/AppData/Local/Temp/RtmpOGSWXx/downloaded_packages")
dmy <- dummyVars(" ~ .", data = train, fullRank=T)
train <- data.frame(predict(dmy, newdata = train))
library(caret,lib.loc= "C:/Users/Prajwala/AppData/Local/Temp/RtmpOGSWXx/downloaded_packages")
library(xgboost)
library("xgboost", lib.loc="E:/R-3.3.1/library")
detach("package:xgboost", unload=TRUE)
library("xgboost", lib.loc="E:/R-3.3.1/library")
install.packages(xgboost,dependencies=TRUE)
detach("package:xgboost", unload=TRUE)
library("utils", lib.loc="E:/R-3.3.1/library")
library("xgboost", lib.loc="E:/R-3.3.1/library")
detach("package:utils", unload=TRUE)
detach("package:xgboost", unload=TRUE)
library(xgboost)
install.packages("xgboost",dependencies=TRUE)
library(xgboost,lib.loc="C:\sers\Prajwala\AppData\Local\Temp\RtmpKgZOVe\downloaded_packages")
library(xgboost,lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpKgZOVe/downloaded_packages")
library(xgboost,lib.loc="C://Users//Prajwala//AppData//Local//Temp//RtmpKgZOVe//downloaded_packages")
install.packages("xgboost",dependencies=TRUE)
library(xgboost,lib.loc="C://Users//Prajwala//AppData//Local//Temp//RtmpKgZOVe//downloaded_packages")
library(xgboost)#,lib.loc="C://Users//Prajwala//AppData//Local//Temp//RtmpKgZOVe//downloaded_packages")
library(xgboost,lib.loc="C://Users//Prajwala//AppData//Local//Temp//RtmpKgZOVe//downloaded_packages")
library(xgboost,lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpKgZOVe/downloaded_packages")
require(devtools)
install.packages("devtools")
install_github('xgboost','tqchen',subdir='R-package')
install_github('xgboost','tqchen',subdir='R-package')
install.packages("devtools")
library("devtools")
library("devtools")
library("devtools",lib.loc = "C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("devtools",lib.loc = "C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type="source")
library("xgboost", lib.loc="E:/R-3.3.1/library")
detach("package:xgboost", unload=TRUE)
library("tools", lib.loc="E:/R-3.3.1/library")
library("xgboost", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("xgboost", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("drat", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("drat_0.0.1", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("drat_0.0.1.tar.gz", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("drat_0.1.1.tar.gz", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("drat_0.1.1", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("drat", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type="source")
.libPaths()
library("xgboost", lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
library("xgboost")#, lib.loc="C:/Users/Prajwala/AppData/Local/Temp/RtmpkLl0bK/downloaded_packages")
installed.packages(lib.loc = ".")
install.packages("xgboost")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("dmlc/xgboost", subdir = "R-package")
devtools::install_github("dmlc/xgboost", subdir = "R-package")
install.packages("ggplot2")
install.packages("Ckmeans.1d.dp")
demo(package = "xgboost")
demo("basic_walkthrough", package = "xgboost")
library(xgboost)
library(xgboost)
library(xgboost)
devtools::install_github("dmlc/xgboost", subdir = "R-package")
devtools::install_github("dmlc/xgboost", subdir = "R-package")
install.packages("xgboost")
library(xgboost)
library(xgboost)
library(xgboost)
library("xgboost", lib.loc="E:/R-3.3.1/library")
install.packages("chron")
library(xgboost)
library(xgboost)
library(caret)
library(Metrics)
library(RCurl)
setwd("E:/Computer Engg/Machine learning/RScripts/RestaurantRevenue");
#Loading the test and the train datasets
train = read.csv("train.csv")
test = read.csv("test.csv")
str(train)
#Splitting the date column in the dataset
train$date <- strptime(train$Open.Date, "%m/%d/%Y")
train$date <- as.POSIXct(train$date, format="%m/%d/%Y")
train$Month <- factor(format(train$date, "%m"))
train$Year <- factor(format(train$date, "%Y"))
train$Day <- factor(format(train$date,"%d"))
str(train)
test$date <- strptime(test$Open.Date, "%m/%d/%Y")
test$date <- as.POSIXct(test$date, format="%m/%d/%Y")
test$Month <- factor(format(test$date, "%m"))
test$Year <- factor(format(test$date, "%Y"))
test$Day <- factor(format(test$date,"%d"))
str(test)
test$Id = NULL
test$Open.Date = NULL
test$date = NULL
test$Month = as.numeric(test$Month)
test$Year = as.numeric(test$Year)
test$Day = as.numeric(test$Day)
test$date = NULL
str(train)
train$Id = NULL;
train$Open.Date = NULL;
train$date = NULL
str(train)
#Factorising the other parameters
train$City.Group = as.numeric(factor(train$City.Group))
train$City = as.numeric(factor(train$City))
train$Type = as.numeric(factor(train$Type))
test$City.Group = as.numeric(factor(test$City.Group))
test$City = as.numeric(factor(test$City))
test$Type = as.numeric(factor(test$Type))
#Converting categorical variables into numerical using one hot method
dmy <- dummyVars(" ~ .", data = train)
train<- data.frame(predict(dmy, newdata = train))
dmy <- dummyVars(" ~ .", data = test)
test<- data.frame(predict(dmy, newdata = test))
print(train)
print(names(test))
print(names(train))
#Preparing the parameters for xgboost
outcome = c('revenue')
predictors = names(train)[!names(train) %in% outcome]
print(predictors)
print(colnames(train))
set.seed(121)
#SPLITTING TRAINING DATA FOR CROSS VALIDATION
train_size = nrow(train)
trainSet <- train[ 1:floor(train_size/2),]
testSet <- train[(floor(train_size/2)+1):train_size,]
#FINDING OUT THE OPTIMAL PARAMETERS FOR XGBOOST
smallestError = 100000000
for (depth in seq(1,10,1)) {
for (rounds in seq(1,20,1)) {
# train
bst <- xgboost(data = as.matrix(trainSet[,predictors]),
label = trainSet[,outcome],
max.depth=depth, nround=rounds,
objective = "reg:linear", verbose=0)
gc()
# predict
predictions <- predict(bst, as.matrix(testSet[,predictors]), outputmargin=TRUE)
err <- rmse(as.numeric(testSet[,outcome]), as.numeric(predictions))
if (err < smallestError) {
smallestError = err
print(paste(depth,rounds,err))
}
}
}
bst <- xgboost(data = as.matrix(train[,predictors]),label = train[,outcome], max.depth = 4,nround=100,objective = "reg:linear")
str(train)
predict_sol = predict(bst,as.matrix(test[,predictors]))
print(predict_sol)
head(predict_sol)
predict_sol = predict(bst,as.matrix(test[,predictors]))
predict_sol = predict(bst,data.matrix(test[,predictors]))
predictors = names(train)[!names(train) %in% outcome]
predict_sol = predict(bst,data.matrix(test[,predictors]))
test<- data.frame(predict(dmy, newdata = test))
predictors = names(train)[!names(train) %in% outcome]
print(predictors)
print(colnames(train))
set.seed(121)
#SPLITTING TRAINING DATA FOR CROSS VALIDATION
train_size = nrow(train)
trainSet <- train[ 1:floor(train_size/2),]
testSet <- train[(floor(train_size/2)+1):train_size,]
#FINDING OUT THE OPTIMAL PARAMETERS FOR XGBOOST
smallestError = 100000000
for (depth in seq(1,10,1)) {
for (rounds in seq(1,20,1)) {
# train
bst <- xgboost(data = as.matrix(trainSet[,predictors]),
label = trainSet[,outcome],
max.depth=depth, nround=rounds,
objective = "reg:linear", verbose=0)
gc()
predictions <- predict(bst, as.matrix(testSet[,predictors]), outputmargin=TRUE)
# predict
if (err < smallestError) {
err <- rmse(as.numeric(testSet[,outcome]), as.numeric(predictions))
print(paste(depth,rounds,err))
smallestError = err
}
}
}
#Using the values obtained in the model
bst <- xgboost(data = as.matrix(train[,predictors]),label = train[,outcome], max.depth = 4,nround=100,objective = "reg:linear")
#first_model = xgboost(data = as.matrix(train$data), label = train$label,eta = 1, nthread = 2, nround = 2,objective = "reg:linear")
str(train)
predict_sol = predict(bst,data.matrix(test[,predictors]))
print(predict_sol)
head(predict_sol)
temp = read.csv("test.csv")
solution =data.frame(Id = temp$Id,Prediction = predict_sol)
write.csv(solution,file = "submission2.csv",row.names = FALSE)
#install.packages("caret")
colnames(test)
colnames(train)
print(predictors)
dmy <- dummyVars(" ~ .", data = test)
test<- data.frame(predict(dmy, newdata = test))
print(colnames(test))
train<- data.frame(predict(dmy, newdata = train))
dmy <- dummyVars(" ~ .", data = train)
train<- data.frame(predict(dmy, newdata = train))
dmy <- dummyVars(" ~ .", data = test)
test<- data.frame(predict(dmy, newdata = test))
print(train)
print(names(test))
outcome = c('revenue')
predictors = names(train)[!names(train) %in% outcome]
print(predictors)
print(colnames(test))
set.seed(121)
predict_sol = predict(bst,data.matrix(test[,predictors]))
